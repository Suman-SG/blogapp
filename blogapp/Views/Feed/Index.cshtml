
@model IEnumerable<blogapp.Models.BlogPost>
@inject blogapp.Data.BlogDBContext db
@{
    int userId = ViewBag.UserId ?? 0;
    var isCreator = db.BlogPosts.Any(p => p.UserId == userId);
    ViewData["Title"] = "Blog Feed";
    var userName = Context.Session.GetString("UserName");
    var isLoggedIn = !string.IsNullOrEmpty(userName);
    var bookmarkedIds = ViewBag.BookmarkedIds as List<int> ?? new List<int>();
    var selectedSort = ViewBag.SelectedSort as string ?? "";
    var searchQuery = ViewBag.SearchQuery as string ?? "";

}



<!-- Main Content -->
<div class="container-fluid">
    <div class="row">
        <!-- Sidebar -->
        <div class="col-md-3 col-lg-2 sidebar p-0">
            <div class="d-flex flex-column h-100">
                <div class="sidebar-header p-3 text-center">
                    <h4 class="text-white mb-0">BlogHub</h4>
                </div>
                <nav class="flex-grow-1 p-3">
                    <a href="/User/Dashboard" class="nav-link">
                        <i class="fas fa-tachometer-alt me-2"></i>Dashboard
                    </a>
                    <a href="/Category" class="nav-link">
                        <i class="fas fa-tags me-2"></i>Categories
                    </a>
                    <a href="/BlogPost/Create" class="nav-link">
                        <i class="fas fa-plus-circle me-2"></i>New Post
                    </a>
                    <a href="/User/Bookmarks" class="nav-link">
                        <i class="fas fa-bookmark me-2"></i>Bookmarks
                    </a>
                    <a href="/User/Settings" class="nav-link">
                        <i class="fas fa-cog me-2"></i>Settings
                    </a>
                </nav>
                <div class="p-3">
                    <a href="/Auth/Logout" class="nav-link">
                        <i class="fas fa-sign-out-alt me-2"></i>Logout
                    </a>
                </div>
            </div>
        </div>

        <!-- Main Content -->
        <div class="col-md-9 col-lg-10 ms-sm-auto px-4 py-3">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h2>Blog Feed</h2>
                <div class="d-flex">
                    <form method="get" asp-controller="Feed" asp-action="Index" class="me-2">
                        <div class="input-group">
                            <input type="text" name="search" value="@searchQuery" class="form-control"
                                   placeholder="Search..." aria-label="Search">
                            <button class="btn btn-primary" type="submit">
                                <i class="fas fa-search"></i>
                            </button>
                        </div>
                    </form>
                    <form method="get" asp-controller="Feed" asp-action="Index">
                        <select name="sort" class="form-select" onchange="this.form.submit()">
                            <option value="newest" selected="@(selectedSort == "newest")">Newest</option>
                            <option value="likes" selected="@(selectedSort == "likes")">Most Liked</option>
                            <option value="comments" selected="@(selectedSort == "comments")">Most Commented</option>
                        </select>
                    </form>
                </div>
            </div>

            @if (!Model.Any())
            {
                <div class="alert alert-info">
                    No blog posts found. Try adjusting your search or create a new post!
                </div>
            }
            else
            {
                <div class="row" id="post-container">
                    @foreach (var post in Model)
                    {
                        var isLiked = post.Likes?.Any(l => l.UserId == userId) ?? false;
                        var isBookmarked = bookmarkedIds.Contains(post.Id);
                        var commentCount = post.Comments?.Count ?? 0;
                        var viewCount = post.ViewCount;

                        <div class="col-md-6 col-lg-4 mb-4">
                            <div class="card h-100 shadow-sm">
                                @if (!string.IsNullOrEmpty(post.ImagePath))
                                {
                                    <img src="@post.ImagePath" class="card-img-top" alt="@post.Title" style="height: 180px; object-fit: cover;">
                                }
                                else
                                {
                                    <div class="card-img-top bg-light d-flex align-items-center justify-content-center" style="height: 180px;">
                                        <i class="fas fa-image fa-3x text-muted"></i>
                                    </div>
                                }

                                <div class="card-body">
                                    <h5 class="card-title">
                                        <a href="/BlogPost/Details/@post.Id" class="text-decoration-none">@post.Title</a>
                                    </h5>
                                    <div class="d-flex gap-2 mb-2">
                                        <small class="text-muted">@post.CreatedAt.ToString("MMM dd, yyyy")</small>
                                        @if (post.IsAdminChoice)
                                        {
                                            <span class="badge bg-warning text-dark">Editor's Choice</span>
                                        }
                                    </div>
                                    <div class="mb-3">
                                        @foreach (var tag in (post.Tags ?? "").Split(','))
                                        {
                                            if (!string.IsNullOrWhiteSpace(tag))
                                            {
                                                <span class="badge bg-light text-dark me-1">@tag.Trim()</span>
                                            }
                                        }
                                    </div>
                                   
                                </div>

                                <div class="card-footer bg-white border-top-0">
                                    <div class="d-flex justify-content-between align-items-center">
                                        <div class="d-flex gap-2">
                                            <form method="post" asp-controller="BlogPost" asp-action="Like" asp-route-id="@post.Id" class="mb-0">
                                                <button type="submit" class="btn btn-sm btn-outline-danger">
                                                    <i class="fas fa-heart @(isLiked ? "text-danger" : "")"></i>
                                                    <span>@(post.Likes?.Count ?? 0)</span>
                                                </button>
                                            </form>
                                            <a href="/BlogPost/Details/@post.Id#comments" class="btn btn-sm btn-outline-secondary">
                                                <i class="fas fa-comment"></i> @commentCount
                                            </a>
                                            <span class="btn btn-sm btn-outline-secondary">
                                                <i class="fas fa-eye"></i> @viewCount
                                            </span>
                                            <form method="post" asp-controller="User" asp-action="ToggleBookmark" asp-route-id="@post.Id">
                                                @Html.AntiForgeryToken()
                                                <button class="btn btn-sm btn-outline-warning" type="submit">
                                                    <i class="fas fa-bookmark @(isBookmarked ? "text-warning" : "")"></i>
                                                </button>
                                            </form>
                                        </div>
                                        <div class="position-relative">
                                            @await Html.PartialAsync("_ShareBox", post.Id)
                                        </div>

                                        <!-- Share Button -->
                                     
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                </div>

                <div class="text-center mt-3">
                    <button id="load-more-btn" class="btn btn-primary px-4">Load More</button>
                </div>
            }
        </div>
    </div>
</div>

<!-- Toast Notification -->
<div class="position-fixed bottom-0 end-0 p-3" style="z-index: 1100;">
    <div id="copyToast" class="toast align-items-center text-white bg-success border-0" role="alert" aria-live="assertive" aria-atomic="true">
        <div class="d-flex">
            <div class="toast-body">Link copied to clipboard!</div>
            <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
        </div>
    </div>
</div>

@section Styles {
    <style>
        body {
            background: linear-gradient(#F1FAFF, #CBE4FF);
            min-height: 100vh;
        }

        .sidebar {
            background: #1a2035;
            color: white;
            min-height: 100vh;
            position: sticky;
            top: 0;
        }

        .sidebar-header {
            background: rgba(0, 0, 0, 0.2);
            border-bottom: 1px solid rgba(255, 255, 255, 0.1);
        }

        .nav-link {
            color: rgba(255, 255, 255, 0.8);
            padding: 0.5rem 1rem;
            border-radius: 0.25rem;
            margin-bottom: 0.25rem;
            transition: all 0.2s;
        }

            .nav-link:hover, .nav-link.active {
                color: white;
                background: rgba(255, 255, 255, 0.1);
                text-decoration: none;
            }

        .card {
            transition: transform 0.2s;
            border: none;
            border-radius: 0.5rem;
        }

            .card:hover {
                transform: translateY(-5px);
                box-shadow: 0 10px 20px rgba(0, 0, 0, 0.1);
            }

        .card-img-top {
            border-top-left-radius: 0.5rem;
            border-top-right-radius: 0.5rem;
        }

        .share-box {
            width: 200px;
            animation: slideIn 0.2s ease-out;
        }

        @@keyframes slideIn {
            from {
                opacity: 0;
                transform: translateY(-10px);
            }

            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        @@media (max-width: 768px) {
            .sidebar {
                min-height: auto;
                position: relative;
            }
        }
    </style>
}

@section Scripts {
    <script>
        let skip = @Model.Count();

        // Initialize tooltips
        $(function () {
            $('[data-bs-toggle="tooltip"]').tooltip();
        });

        // Share functionality
        function attachShareAndCopyEvents() {
            // Toggle share box
            document.querySelectorAll(".toggle-share").forEach(button => {
                button.onclick = function (e) {
                    e.stopPropagation();
                    const postId = this.getAttribute("data-post-id");
                    const shareBox = document.getElementById("share-box-" + postId);

                    // Hide all other share boxes
                    document.querySelectorAll(".share-box").forEach(box => {
                        if (box !== shareBox) box.style.display = "none";
                    });

                    // Position and show current share box
                    const rect = this.getBoundingClientRect();
                    shareBox.style.top = (window.scrollY + rect.bottom + 5) + "px";
                    shareBox.style.left = rect.left + "px";
                    shareBox.style.display = shareBox.style.display === "block" ? "none" : "block";
                };
            });

            // Close share box
            document.querySelectorAll(".close-share").forEach(btn => {
                btn.onclick = function (e) {
                    e.stopPropagation();
                    this.closest(".share-box").style.display = "none";
                };
            });

            // Share to social media
            document.querySelectorAll(".share-link").forEach(link => {
                link.onclick = function (e) {
                    e.preventDefault();
                    const url = window.location.origin + this.getAttribute("data-url");
                    const platform = this.getAttribute("data-platform");
                    let shareUrl = "";

                    switch (platform) {
                        case "facebook":
                            shareUrl = `https://www.facebook.com/sharer/sharer.php?u=${encodeURIComponent(url)}`;
                            break;
                        case "twitter":
                            shareUrl = `https://twitter.com/intent/tweet?url=${encodeURIComponent(url)}`;
                            break;
                        case "linkedin":
                            shareUrl = `https://www.linkedin.com/shareArticle?mini=true&url=${encodeURIComponent(url)}`;
                            break;
                    }

                    window.open(shareUrl, "_blank", "width=600,height=400");
                };
            });

            // Copy link
            document.querySelectorAll(".copy-link").forEach(link => {
                link.onclick = function (e) {
                    e.preventDefault();
                    const url = window.location.origin + this.getAttribute("data-url");
                    navigator.clipboard.writeText(url).then(() => {
                        const toast = new bootstrap.Toast(document.getElementById('copyToast'));
                        toast.show();
                        setTimeout(() => toast.hide(), 3000);
                    });
                };
            });
        }

        // Close share boxes when clicking outside
        document.addEventListener('click', function(e) {
            if (!e.target.closest('.share-box') && !e.target.closest('.toggle-share')) {
                document.querySelectorAll('.share-box').forEach(box => {
                    box.style.display = 'none';
                });
            }
        });

        // Load more posts
        document.getElementById("load-more-btn")?.addEventListener("click", function () {
            this.disabled = true;
            this.innerHTML = '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Loading...';

            fetch(`/Feed/LoadMore?skip=${skip}`)
                .then(res => res.text())
                .then(html => {
                    if (html.trim()) {
                        const container = document.getElementById("post-container");
                        container.insertAdjacentHTML("beforeend", html);
                        skip += 5;
                        attachShareAndCopyEvents();
                    } else {
                        this.style.display = "none";
                    }
                })
                .finally(() => {
                    this.disabled = false;
                    this.textContent = "Load More";
                });
        });

        // Initialize on page load
        document.addEventListener('DOMContentLoaded', function() {
            attachShareAndCopyEvents();
        });
              @{
                var shareUrl = $"{Context.Request.Scheme}://{Context.Request.Host}/BlogPost/Details/{Model}";
        }

       

    
        tinymce.init({
            selector: '#contentEditor',
            plugins: 'link lists code image paste',
            toolbar: 'undo redo | bold italic | bullist numlist | link image | code',
            menubar: false,
            branding: false,
            height: 350,

            // Clean content on paste
            paste_preprocess: function(plugin, args) {
                // Remove all HTML tags except basic formatting
                let cleanContent = args.content.replace(/<(?!\/?(p|br|strong|em|ul|ol|li|a)(\s[^>]*)?\/?>[^>]*>/gi, '');

                // Remove all attributes except href for links
                cleanContent = cleanContent.replace(/<(\w+)(?:\s+[^>]*)?>/g, function(match, tag) {
                    if (tag.toLowerCase() === 'a') {
                        const hrefMatch = match.match(/\shref\s*=\s*(["'])(.*?)\1/i);
                        return hrefMatch ? `<a href="${hrefMatch[2]}">` : '<a>';
                    }
                    return `<${tag}>`;
                });

                // Remove empty paragraphs
                cleanContent = cleanContent.replace(/<p>\s*<\/p>/g, '');

                args.content = cleanContent;
            },

            // Clean content when saving
            setup: function(editor) {
                editor.on('GetContent', function(e) {
                    // Same cleaning as paste_preprocess
                    e.content = e.content.replace(/<(?!\/?(p|br|strong|em|ul|ol|li|a)(\s[^>]*)?\/?>[^>]*>/gi, '');
                    e.content = e.content.replace(/<(\w+)(?:\s+[^>]*)?>/g, function(match, tag) {
                        if (tag.toLowerCase() === 'a') {
                            const hrefMatch = match.match(/\shref\s*=\s*(["'])(.*?)\1/i);
                            return hrefMatch ? `<a href="${hrefMatch[2]}">` : '<a>';
                        }
                        return `<${tag}>`;
                    });
                    e.content = e.content.replace(/<p>\s*<\/p>/g, '');
                });
            }
        });
    </script>
}