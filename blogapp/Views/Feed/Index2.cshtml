@* <!-- #region name -->



<!-- #endregion -->@* @inject blogapp.Data.BlogDBContext db
@model IEnumerable<blogapp.Models.BlogPost>

@{
    int userId = ViewBag.UserId ?? 0;
    var isCreator = db.BlogPosts.Any(p => p.UserId == userId);
    var notifications = db.Notifications
      .Where(n => !n.IsForCreators || isCreator)
      .OrderByDescending(n => n.CreatedAt)
      .Take(5)
      .ToList();
    ViewData["Title"] = "Blog Feed";
    var userName = Context.Session.GetString("UserName");
    var isLoggedIn = !string.IsNullOrEmpty(userName);
    var bookmarkedIds = ViewBag.BookmarkedIds as List<int> ?? new List<int>();
    var selectedSort = ViewBag.SelectedSort as string ?? "";
    var searchQuery = ViewBag.SearchQuery as string ?? "";
    var profileImagePath = Context.Session.GetString("ProfileImagePath") ?? "";
    var hasProfileImage = !string.IsNullOrEmpty(profileImagePath);
}

<!-- Fonts & Icons -->
<link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;500;600;700&display=swap" rel="stylesheet">
<link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css" rel="stylesheet">
<link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Material+Symbols+Rounded:opsz,wght,FILL,GRAD@24,400,0,0">

<style>
    * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
        font-family: "Poppins", sans-serif;
    }

    body {
        min-height: 100vh;
        background: linear-gradient(#F1FAFF, #CBE4FF);
        display: flex;
    }

    /* Sidebar Styles */
    .sidebar {
        width: 270px;
        background: #151A2D;
        height: 100vh;
        position: fixed;
        left: 0;
        top: 0;
        overflow-y: auto;
        padding: 20px;
        box-shadow: 2px 0 10px rgba(0,0,0,0.1);
        z-index: 100;
    }

    .sidebar-header {
        display: flex;
        align-items: center;
        justify-content: space-between;
        padding-bottom: 20px;
        border-bottom: 1px solid rgba(255,255,255,0.1);
        margin-bottom: 20px;
    }

        .sidebar-header img {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            object-fit: cover;
        }

    .sidebar-toggler {
        background: transparent;
        border: none;
        color: white;
        cursor: pointer;
        font-size: 1.5rem;
    }

    .sidebar-nav {
        display: flex;
        flex-direction: column;
        gap: 10px;
    }

    .nav-link {
        color: white;
        text-decoration: none;
        display: flex;
        align-items: center;
        gap: 12px;
        padding: 12px 15px;
        border-radius: 8px;
        transition: all 0.3s ease;
    }

        .nav-link:hover {
            background: rgba(255,255,255,0.1);
        }

        .nav-link span.material-symbols-rounded {
            font-size: 1.5rem;
        }

    /* Main Content Styles */
    .main-container {
        flex: 1;
        margin-left: 270px; /* Same as sidebar width */
        padding: 30px;
        max-width: calc(100% - 270px);
    }

    /* Blog Card Styles */
    .blog-card {
        background: white;
        border-radius: 12px;
        padding: 20px;
        margin-bottom: 20px;
        box-shadow: 0 4px 15px rgba(0,0,0,0.05);
    }

    /* Responsive Adjustments */
    @@media (max-width: 992px) {
        .sidebar {
            width: 80px;
        }

            .sidebar .nav-label {
                display: none;
            }

        .main-container {
            margin-left: 80px;
            max-width: calc(100% - 80px);
        }
    }

    @@media (max-width: 768px) {
        body {
            flex-direction: column;
        }

        .sidebar {
            width: 100%;
            height: auto;
            position: relative;
            padding: 15px;
        }

        .sidebar-nav {
            flex-direction: row;
            flex-wrap: wrap;
            justify-content: center;
        }

        .main-container {
            margin-left: 0;
            max-width: 100%;
            padding: 20px;
        }
    }
</style>
<!-- Sidebar -->
<div class="sidebar">
    <header class="sidebar-header">
        <div class="header-logo">
            @if (!string.IsNullOrEmpty(profileImagePath))
            {
                <img src="@profileImagePath" alt="Profile" />
            }
            else
            {
                <img src="https://via.placeholder.com/40" alt="Profile" />
            }
        </div>
        <button class="sidebar-toggler">
            <span class="material-symbols-rounded">menu</span>
        </button>
    </header>

    <nav class="sidebar-nav">
        <a href="/User/Dashboard" class="nav-link">
            <span class="material-symbols-rounded">user</span>
            <span class="nav-label">Dashboard</span>
        </a>
        <a href="/Category" class="nav-link">
            <span class="material-symbols-rounded">Category</span>
            <span class="nav-label">Category</span>
        </a>
        <a href="/BlogPost/Create" class="nav-link">
            <span class="material-symbols-rounded">add</span>
            <span class="nav-label">New Post</span>
        </a>
        <a href="/User/Bookmarks" class="nav-link">
            <span class="material-symbols-rounded">bookmark</span>
            <span class="nav-label">Bookmarks</span>
        </a>
        <a href="/User/Settings" class="nav-link">
            <span class="material-symbols-rounded">settings</span>
            <span class="nav-label">Settings</span>
        </a>
        <a href="/Auth/Logout" class="nav-link">
            <span class="material-symbols-rounded">logout</span>
            <span class="nav-label">Logout</span>
        </a>
    </nav>
</div>

<!-- Main Content -->
<div class="main-container">
    <h2 class="mb-4">BlogHub</h2>

    <div class="search-container mb-4">
        <form method="get" asp-controller="Home" asp-action="Index">
            <div class="input-group">
                <input type="text" name="search" value="@searchQuery" class="form-control" placeholder="Search blogs...">
                <button type="submit" class="btn btn-primary">Search</button>
            </div>
        </form>
    </div>

    <div class="blog-feed">
        @if (!Model.Any())
        {
            <div class="alert alert-info">
                No blog posts found. Try adjusting your search or create a new post!
            </div>
        }
        else
        {
            @foreach (var post in Model)
            {
                var isLiked = post.Likes?.Any(l => l.UserId == userId) ?? false;
                var isBookmarked = bookmarkedIds.Contains(post.Id);
                var commentCount = post.Comments?.Count ?? 0;
                var viewCount = post.ViewCount;
                var isMatch = !string.IsNullOrEmpty(searchQuery) &&
                post.Title.Contains(searchQuery, StringComparison.OrdinalIgnoreCase);

                <div class="col-12 mb-4">
                    <div class="blog-card @(isMatch ? "border-primary" : "")">
                        <div class="d-flex align-items-start gap-3">
                            @if (!string.IsNullOrEmpty(post.ImagePath))
                            {
                                <img src="@post.ImagePath" alt="Blog image" style="width: 120px; height: 80px; object-fit: cover; border-radius: 8px;">
                            }
                            else
                            {
                                <div style="width: 120px; height: 80px; background-color: #e2e8f0; display: flex; align-items: center; justify-content: center;">
                                    <i class="fas fa-image"></i>
                                </div>
                            }

                            <div>
                                <h4><a href="/BlogPost/Details/@post.Id" class="text-decoration-none">@post.Title</a></h4>
                                <div class="d-flex gap-2 mb-2">
                                    <span class="text-muted small">@post.CreatedAt.ToString("MMM dd, yyyy")</span>
                                    @if (post.IsAdminChoice)
                                    {
                                        <span class="badge bg-warning text-dark">Editor's Choice</span>
                                    }
                                </div>
                                <div class="d-flex gap-2 flex-wrap">
                                    @foreach (var tag in (post.Tags ?? "").Split(','))
                                    {
                                        if (!string.IsNullOrWhiteSpace(tag))
                                        {
                                            <span class="badge bg-light text-dark">@tag.Trim()</span>
                                        }
                                    }
                                </div>
                            </div>
                        </div>

                        <!-- Stats and buttons -->
                        <div class="blog-stats mt-3 pt-3 border-top d-flex gap-3 align-items-center">
                            <form method="post" asp-controller="BlogPost" asp-action="Like" asp-route-id="@post.Id">
                                <button class="like-btn" type="submit">
                                    <i class="fas fa-heart" style="color: @(isLiked ? "#ef4444" : "#cbd5e1")"></i>
                                    <span>@(post.Likes?.Count ?? 0)</span>
                                </button>
                            </form>
                            <form method="post" asp-controller="User" asp-action="ToggleBookmark" asp-route-id="@post.Id">
                                @Html.AntiForgeryToken()
                                <button class="bookmark-btn" type="submit">
                                    <i class="fas fa-bookmark" style="color: @(isBookmarked ? "#f59e0b" : "#cbd5e1")"></i>
                                </button>
                            </form>
                            <div class="stat-item"><i class="fas fa-comment"></i> <span>@commentCount</span></div>
                            <div class="stat-item"><i class="fas fa-eye"></i> <span>@viewCount</span></div>
                        </div>
                    </div>
                </div>
            }
        }
    </div>
</div>

@section Scripts {
    <script>
        document.querySelectorAll('.share-toggle').forEach((btn, index) => {
            btn.addEventListener('click', function () {
                document.querySelectorAll('.share-box').forEach(box => box.style.display = 'none');
                const shareBox = this.nextElementSibling;
                shareBox.style.display = (shareBox.style.display === 'flex') ? 'none' : 'flex';

                const postId = document.querySelectorAll('.blog-card')[index].querySelector('a').href.split('/').pop();
                const postUrl = `${window.location.origin}/BlogPost/Details/${postId}`;

                const links = shareBox.querySelectorAll('.share-link');
                links[0].href = `https://wa.me/?text=${encodeURIComponent(postUrl)}`;
                links[1].href = `https://www.facebook.com/sharer/sharer.php?u=${encodeURIComponent(postUrl)}`;
                links[2].href = `https://t.me/share/url?url=${encodeURIComponent(postUrl)}`;
                links[3].href = `https://twitter.com/intent/tweet?url=${encodeURIComponent(postUrl)}`;
            });
        });

        document.querySelectorAll('.copy-link').forEach((btn, index) => {
            btn.addEventListener('click', function (e) {
                e.preventDefault();
                const postId = document.querySelectorAll('.blog-card')[index].querySelector('a').href.split('/').pop();
                const postUrl = `${window.location.origin}/BlogPost/Details/${postId}`;
                navigator.clipboard.writeText(postUrl).then(() => {
                    const msg = document.getElementById('copyMsg');
                    msg.style.display = 'block';
                    setTimeout(() => msg.style.display = 'none', 2000);
                });
            });
        });

        document.querySelector('.sidebar-toggler').addEventListener('click', function () {
            document.querySelector('.sidebar').classList.toggle('collapsed');
        });

        document.querySelector('input[name="search"]').addEventListener('change', function () {
            this.form.submit();
        });
    </script>
}










@inject blogapp.Data.BlogDBContext db
@model IEnumerable<blogapp.Models.BlogPost>

@{
    int userId = ViewBag.UserId ?? 0;
    var isCreator = db.BlogPosts.Any(p => p.UserId == userId);
    var notifications = db.Notifications
      .Where(n => !n.IsForCreators || isCreator)
      .OrderByDescending(n => n.CreatedAt)
      .Take(5)
      .ToList();
    ViewData["Title"] = "Blog Feed";
    var userName = Context.Session.GetString("UserName");
    var isLoggedIn = !string.IsNullOrEmpty(userName);
    var bookmarkedIds = ViewBag.BookmarkedIds as List<int> ?? new List<int>();
    var selectedSort = ViewBag.SelectedSort as string ?? "";
    var searchQuery = ViewBag.SearchQuery as string ?? "";
    var profileImagePath = Context.Session.GetString("ProfileImagePath") ?? "";
    var hasProfileImage = !string.IsNullOrEmpty(profileImagePath);
}

<!-- Fonts & Icons -->
<link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700&display=swap" rel="stylesheet">
<link href="https://fonts.googleapis.com/css2?family=Playfair+Display:wght@400;500;600;700&display=swap" rel="stylesheet">
<link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css" rel="stylesheet">
<link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Material+Symbols+Rounded:opsz,wght,FILL,GRAD@24,400,0,0">

// <style>
    
//     /* Blog Card Styles */
//     .blog-feed {
//         display: grid;
//         grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));
//         gap: 25px;
//     }

//     .blog-card {
//         background: white;
//         border-radius: var(--radius);
//         overflow: hidden;
//         box-shadow: var(--shadow);
//         transition: var(--transition);
//         border: 1px solid rgba(0,0,0,0.05);
//     }

//         .blog-card:hover {
//             transform: translateY(-5px);
//             box-shadow: 0 10px 25px rgba(0,0,0,0.1);
//         }

//         .blog-card.highlight {
//             border-left: 4px solid var(--accent);
//         }

//     .blog-image {
//         width: 100%;
//         height: 200px;
//         object-fit: cover;
//     }

//     .blog-content {
//         padding: 20px;
//     }

//     .blog-title {
//         font-family: 'Playfair Display', serif;
//         font-size: 1.4rem;
//         font-weight: 600;
//         margin-bottom: 10px;
//         color: var(--dark);
//     }

//         .blog-title a {
//             color: inherit;
//             text-decoration: none;
//             transition: var(--transition);
//         }

//             .blog-title a:hover {
//                 color: var(--primary);
//             }

//     .blog-meta {
//         display: flex;
//         align-items: center;
//         gap: 15px;
//         margin-bottom: 15px;
//         font-size: 0.9rem;
//         color: var(--gray);
//     }

//     .blog-date {
//         display: flex;
//         align-items: center;
//         gap: 5px;
//     }

//     .blog-badge {
//         background: var(--primary);
//         color: white;
//         padding: 3px 10px;
//         border-radius: 20px;
//         font-size: 0.75rem;
//         font-weight: 600;
//     }

//     .blog-tags {
//         display: flex;
//         flex-wrap: wrap;
//         gap: 8px;
//         margin-bottom: 15px;
//     }

//     .blog-tag {
//         background: var(--light-gray);
//         color: var(--dark);
//         padding: 4px 12px;
//         border-radius: 20px;
//         font-size: 0.8rem;
//         font-weight: 500;
//         transition: var(--transition);
//     }

//         .blog-tag:hover {
//             background: var(--primary);
//             color: white;
//         }

//     .blog-stats {
//         display: flex;
//         align-items: center;
//         gap: 20px;
//         padding-top: 15px;
//         border-top: 1px solid var(--light-gray);
//     }

//     .stat-item {
//         display: flex;
//         align-items: center;
//         gap: 5px;
//         color: var(--gray);
//         font-size: 0.9rem;
//     }

    
<link rel="stylesheet" href="~/css/BlogPost/Index.css" asp-append-version="true" />
<style>

       :root {
           --primary: #4361ee;
           --primary-light: #3f37c9;
           --secondary: #3a0ca3;
           --accent: #f72585;
           --light: #f8f9fa;
           --dark: #212529;
           --gray: #6c757d;
           --light-gray: #e9ecef;
           --success: #4cc9f0;
           --warning: #f8961e;
           --danger: #ef233c;
           --radius: 12px;
           --shadow: 0 4px 20px rgba(0, 0, 0, 0.08);
           --transition: all 0.3s ease;
       }

       * {
           margin: 0;
           padding: 0;
           box-sizing: border-box;
       }

       body {
           min-height: 100vh;
           background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
           font-family: 'Poppins', sans-serif;
           color: var(--dark);
           line-height: 1.6;
       }

       /* Sidebar Styles */
       .sidebar {
           width: 280px;
           background: linear-gradient(135deg, #151A2D 0%, #0D1120 100%);
           height: 100vh;
           position: fixed;
           left: 0;
           top: 0;
           overflow-y: auto;
           padding: 25px;
           box-shadow: 5px 0 15px rgba(0,0,0,0.1);
           z-index: 100;
           transition: var(--transition);
       }

       .sidebar-header {
           display: flex;
           align-items: center;
           justify-content: space-between;
           padding-bottom: 25px;
           border-bottom: 1px solid rgba(255,255,255,0.1);
           margin-bottom: 25px;
       }

           .sidebar-header img {
               width: 48px;
               height: 48px;
               border-radius: 50%;
               object-fit: cover;
               border: 2px solid var(--primary);
           }

       .sidebar-toggler {
           background: transparent;
           border: none;
           color: white;
           cursor: pointer;
           font-size: 1.5rem;
           transition: var(--transition);
       }

           .sidebar-toggler:hover {
               color: var(--accent);
           }

       .sidebar-nav {
           display: flex;
           flex-direction: column;
           gap: 8px;
       }

       .nav-link {
           color: rgba(255,255,255,0.8);
           text-decoration: none;
           display: flex;
           align-items: center;
           gap: 15px;
           padding: 12px 15px;
           border-radius: var(--radius);
           transition: var(--transition);
           font-weight: 500;
       }

           .nav-link:hover, .nav-link.active {
               background: rgba(255,255,255,0.1);
               color: white;
           }

           .nav-link span.material-symbols-rounded {
               font-size: 1.4rem;
           }

       /* Main Content Styles */
       .main-container {
           flex: 1;
           margin-left: 280px;
           padding: 30px;
           max-width: calc(100% - 280px);
           transition: var(--transition);
       }

       .page-title {
           font-family: 'Playfair Display', serif;
           font-weight: 700;
           font-size: 2.5rem;
           color: var(--secondary);
           margin-bottom: 30px;
           position: relative;
           display: inline-block;
       }

           .page-title::after {
               content: '';
               position: absolute;
               bottom: -10px;
               left: 0;
               width: 60px;
               height: 4px;
               background: var(--accent);
               border-radius: 2px;
           }

       /* Search Styles */
       .search-container {
           margin-bottom: 30px;
       }

           .search-container .input-group {
               box-shadow: var(--shadow);
               border-radius: var(--radius);
               overflow: hidden;
           }

           .search-container input {
               border: none;
               padding: 12px 20px;
               font-size: 1rem;
           }

               .search-container input:focus {
                   box-shadow: none;
                   border-color: var(--primary);
               }

           .search-container button {
               background: var(--primary);
               border: none;
               padding: 0 20px;
               font-weight: 500;
               transition: var(--transition);
           }

               .search-container button:hover {
                   background: var(--primary-light);
               }

       .blog-card {
           background: white;
           border-radius: 12px;
           padding: 20px;
           margin-bottom: 20px;
           box-shadow: 0 4px 15px rgba(0,0,0,0.05);
       }

       .like-btn, .bookmark-btn {
           background: none;
           border: none;
           cursor: pointer;
           display: flex;
           align-items: center;
           gap: 5px;
           color: var(--gray);
           transition: var(--transition);
       }

           .like-btn:hover {
               color: var(--danger);
           }

           .bookmark-btn:hover {
               color: var(--warning);
           }

       /* Empty State */
       .empty-state {
           text-align: center;
           padding: 50px 20px;
           grid-column: 1 / -1;
       }

           .empty-state i {
               font-size: 3rem;
               color: var(--gray);
               margin-bottom: 20px;
           }

           .empty-state h3 {
               font-family: 'Playfair Display', serif;
               margin-bottom: 15px;
               color: var(--dark);
           }

       /* Responsive Adjustments */
       @@media (max-width: 1200px) {
           .blog-feed

       {
           grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
       }

       }

       @@media (max-width: 992px) {
           .sidebar

       {
           width: 80px;
           padding: 20px 10px;
       }

       .sidebar .nav-label {
           display: none;
       }

       .sidebar-header {
           justify-content: center;
       }

       .sidebar-toggler {
           display: none;
       }

       .main-container {
           margin-left: 80px;
           max-width: calc(100% - 80px);
       }

       }

       @@media (max-width: 768px) {
           .sidebar

       {
           width: 100%;
           height: auto;
           position: relative;
           padding: 15px;
       }

       .sidebar-nav {
           flex-direction: row;
           flex-wrap: wrap;
           justify-content: center;
       }

       .main-container {
           margin-left: 0;
           max-width: 100%;
           padding: 20px;
       }

       .blog-feed {
           grid-template-columns: 1fr;
       }

       }

       @@media (max-width: 576px) {
           .page-title

       {
           font-size: 2rem;
       }

       .blog-stats {
           gap: 15px;
           justify-content: space-between;
       }

       }
</style>
<!-- Sidebar -->
<div class="sidebar">
    <header class="sidebar-header">
        <div class="header-logo">
            @if (!string.IsNullOrEmpty(profileImagePath))
            {
                <img src="@profileImagePath" alt="Profile" />
            }
            else
            {
                <img src="https://ui-avatars.com/api/?name=@userName&background=4361ee&color=fff" alt="Profile" />
            }
        </div>
        <button class="sidebar-toggler">
            <span class="material-symbols-rounded">menu</span>
        </button>
    </header>

    <nav class="sidebar-nav">
        <a href="/User/Dashboard" class="nav-link active">
            <span class="material-symbols-rounded">dashboard</span>
            <span class="nav-label">Dashboard</span>
        </a>
        <a href="/Category" class="nav-link">
            <span class="material-symbols-rounded">category</span>
            <span class="nav-label">Categories</span>
        </a>
        <a href="/BlogPost/Create" class="nav-link">
            <span class="material-symbols-rounded">edit</span>
            <span class="nav-label">New Post</span>
        </a>
        <a href="/User/Bookmarks" class="nav-link">
            <span class="material-symbols-rounded">bookmark</span>
            <span class="nav-label">Bookmarks</span>
        </a>
        <a href="/User/Settings" class="nav-link">
            <span class="material-symbols-rounded">settings</span>
            <span class="nav-label">Settings</span>
        </a>
        <a href="/Auth/Logout" class="nav-link">
            <span class="material-symbols-rounded">logout</span>
            <span class="nav-label">Logout</span>
        </a>
    </nav>
</div>

<!-- Main Content -->
<div class="main-container">
    <h1 class="page-title">BlogHub Feed</h1>

    <div class="search-container">
        <form method="get" asp-controller="Home" asp-action="Index" class="w-100">
            <div class="input-group">
                <input type="text" name="search" value="@searchQuery" class="form-control" placeholder="Search blogs...">
                <button type="submit" class="btn btn-primary">
                    <i class="fas fa-search"></i> Search
                </button>
            </div>
        </form>
    </div>

    <div class="blog-feed">
        @if (!Model.Any())
        {
            <div class="empty-state">
                <i class="fas fa-newspaper"></i>
                <h3>No blog posts found</h3>
                <p>Try adjusting your search or be the first to create a post!</p>
                <a href="/BlogPost/Create" class="btn btn-primary mt-3">
                    <i class="fas fa-plus"></i> Create Post
                </a>
            </div>
        }
        else
        {
            @foreach (var post in Model)
            {
                var isLiked = post.Likes?.Any(l => l.UserId == userId) ?? false;
                var isBookmarked = bookmarkedIds.Contains(post.Id);
                var commentCount = post.Comments?.Count ?? 0;
                var viewCount = post.ViewCount;
                var isMatch = !string.IsNullOrEmpty(searchQuery) && post.Title.Contains(searchQuery, StringComparison.OrdinalIgnoreCase);

                <div class="blog-card @(isMatch ? "highlight" : "") @(post.IsAdminChoice ? "editor-choice" : "")">
                    @if (!string.IsNullOrEmpty(post.ImagePath))
                    {
                        <img src="@post.ImagePath" alt="Blog cover" class="blog-image">
                    }
                    else
                    {
                        <div class="blog-image" style="background: linear-gradient(135deg, #4361ee 0%, #3a0ca3 100%); display: flex; align-items: center; justify-content: center;">
                            <i class="fas fa-image" style="color: white; font-size: 2rem;"></i>
                        </div>
                    }

                    <div class="blog-content">
                        <h3 class="blog-title">
                            <a href="/BlogPost/Details/@post.Id">@post.Title</a>
                        </h3>

                        <div class="blog-meta">
                            <span class="blog-date">
                                <i class="far fa-calendar-alt"></i> @post.CreatedAt.ToString("MMM dd, yyyy")
                            </span>
                            @if (post.IsAdminChoice)
                            {
                                <span class="blog-badge">
                                    <i class="fas fa-star"></i> Editor's Choice
                                </span>
                            }
                        </div>

                        @if (!string.IsNullOrEmpty(post.Tags))
                        {
                            <div class="blog-tags">
                                @foreach (var tag in post.Tags.Split(','))
                                {
                                    if (!string.IsNullOrWhiteSpace(tag))
                                    {
                                        <a href="/Home/Index?search=@tag.Trim()" class="blog-tag">@tag.Trim()</a>
                                    }
                                }
                            </div>
                        }

                        <div class="blog-stats">
                            <form method="post" asp-controller="BlogPost" asp-action="Like" asp-route-id="@post.Id">
                                <button class="like-btn" type="submit">
                                    <i class="fas fa-heart @(isLiked ? "text-danger" : "")"></i>
                                    <span>@(post.Likes?.Count ?? 0)</span>
                                </button>
                            </form>

                            <form method="post" asp-controller="User" asp-action="ToggleBookmark" asp-route-id="@post.Id">
                                @Html.AntiForgeryToken()
                                <button class="bookmark-btn" type="submit">
                                    <i class="fas fa-bookmark @(isBookmarked ? "text-warning" : "")"></i>
                                </button>
                            </form>

                            <div class="stat-item">
                                <i class="fas fa-comment"></i>
                                <span>@commentCount</span>
                            </div>

                            <div class="stat-item">
                                <i class="fas fa-eye"></i>
                                <span>@viewCount</span>
                            </div>
                        </div>
                    </div>
                </div>
            }
        }
    </div>
</div>

@section Scripts {
    <script>
        // Toggle sidebar on mobile
        document.querySelector('.sidebar-toggler').addEventListener('click', function() {
            document.querySelector('.sidebar').classList.toggle('collapsed');
            document.querySelector('.main-container').classList.toggle('expanded');
        });

        // Like button animation
        document.querySelectorAll('.like-btn').forEach(btn => {
            btn.addEventListener('click', function() {
                if (this.querySelector('i').classList.contains('text-danger')) {
                    this.querySelector('i').classList.add('animate__animated', 'animate__headShake');
                    setTimeout(() => {
                        this.querySelector('i').classList.remove('animate__animated', 'animate__headShake');
                    }, 500);
                } else {
                    this.querySelector('i').classList.add('animate__animated', 'animate__heartBeat');
                    setTimeout(() => {
                        this.querySelector('i').classList.remove('animate__animated', 'animate__heartBeat');
                    }, 500);
                }
            });
        });

        // Bookmark button animation
        document.querySelectorAll('.bookmark-btn').forEach(btn => {
            btn.addEventListener('click', function() {
                this.querySelector('i').classList.add('animate__animated', 'animate__rubberBand');
                setTimeout(() => {
                    this.querySelector('i').classList.remove('animate__animated', 'animate__rubberBand');
                }, 500);
            });
        });

        // Highlight search matches
        @if (!string.IsNullOrEmpty(searchQuery))
        {
                <text>
                const searchTerm = "@searchQuery";
                if (searchTerm) {
                    const cards = document.querySelectorAll('.blog-card');
                    cards.forEach(card => {
                        const title = card.querySelector('.blog-title').textContent.toLowerCase();
                        if (title.includes(searchTerm.toLowerCase())) {
                            card.classList.add('highlight');
                            setTimeout(() => {
                                card.scrollIntoView({ behavior: 'smooth', block: 'center' });
                            }, 300);
                        }
                    });
                }
                </text>
        }
    </script>
} 









@inject blogapp.Data.BlogDBContext db
@model IEnumerable<blogapp.Models.BlogPost>

@{
    int userId = ViewBag.UserId ?? 0;
    var isCreator = db.BlogPosts.Any(p => p.UserId == userId);
    var notifications = db.Notifications
      .Where(n => !n.IsForCreators || isCreator)
      .OrderByDescending(n => n.CreatedAt)
      .Take(5)
      .ToList();
    ViewData["Title"] = "Blog Feed";
    var userName = Context.Session.GetString("UserName");
    var isLoggedIn = !string.IsNullOrEmpty(userName);
    var bookmarkedIds = ViewBag.BookmarkedIds as List<int> ?? new List<int>();
    var selectedSort = ViewBag.SelectedSort as string ?? "";
    var searchQuery = ViewBag.SearchQuery as string ?? "";
    var profileImagePath = Context.Session.GetString("ProfileImagePath") ?? "";
    var hasProfileImage = !string.IsNullOrEmpty(profileImagePath);
}

<!-- Fonts & Icons -->
<link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;500;600;700&display=swap" rel="stylesheet">
<link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css" rel="stylesheet">
<link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Material+Symbols+Rounded:opsz,wght,FILL,GRAD@24,400,0,0">

<style>
    * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
        font-family: "Poppins", sans-serif;
    }

    body {
        min-height: 100vh;
        background: linear-gradient(#F1FAFF, #CBE4FF);
        display: flex;
    }

    .content-wrapper {
        display: flex;
        flex-direction: column;
        margin-left: 270px;
        width: calc(100% - 270px);
        padding: 20px;
    }

    .search-sort-container {
        display: flex;
        gap: 20px;
        margin-bottom: 20px;
        align-items: center;
    }

    .search-form {
        flex-grow: 1;
    }

    .tags-container {
        display: flex;
        flex-wrap: wrap;
        gap: 8px;
        margin-bottom: 20px;
    }

    .tag-badge {
        padding: 6px 12px;
        background: #e2e8f0;
        border-radius: 20px;
        font-size: 14px;
        cursor: pointer;
        transition: all 0.2s;
    }

        .tag-badge:hover {
            background: #cbd5e1;
        }

    /* Update the main container style */
    .main-container {
        flex: 1;
        padding: 0;
        margin-left: 0;
    }

    /* Responsive adjustments */
    @@media (max-width: 992px) {
        .content-wrapper

    {
        margin-left: 80px;
        width: calc(100% - 80px);
    }

    }

    @@media (max-width: 768px) {
        .content-wrapper

    {
        margin-left: 0;
        width: 100%;
    }

    .search-sort-container {
        flex-direction: column;
        align-items: stretch;
    }

    }
</style>

    /* Sidebar Styles */
    .sidebar {
        width: 270px;
        background: #151A2D;
        height: 100vh;
        position: fixed;
        left: 0;
        top: 0;
        overflow-y: auto;
        padding: 20px;
        box-shadow: 2px 0 10px rgba(0,0,0,0.1);
        z-index: 100;
    }

    .sidebar-header {
        display: flex;
        align-items: center;
        justify-content: space-between;
        padding-bottom: 20px;
        border-bottom: 1px solid rgba(255,255,255,0.1);
        margin-bottom: 20px;
    }

        .sidebar-header img {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            object-fit: cover;
        }

    .sidebar-toggler {
        background: transparent;
        border: none;
        color: white;
        cursor: pointer;
        font-size: 1.5rem;
    }

    .sidebar-nav {
        display: flex;
        flex-direction: column;
        gap: 10px;
    }

    .nav-link {
        color: white;
        text-decoration: none;
        display: flex;
        align-items: center;
        gap: 12px;
        padding: 12px 15px;
        border-radius: 8px;
        transition: all 0.3s ease;
    }

        .nav-link:hover {
            background: rgba(255,255,255,0.1);
        }

        .nav-link span.material-symbols-rounded {
            font-size: 1.5rem;
        }

    /* Main Content Styles */
    .main-container {
        flex: 1;
        margin-left: 270px; /* Same as sidebar width */
        padding: 30px;
    }

    /* Blog Card Styles */
    .blog-card {
        background: white;
        border-radius: 12px;
        padding: 20px;
        margin-bottom: 20px;
        box-shadow: 0 4px 15px rgba(0,0,0,0.05);
    }

    /* ✅ FIXED: Responsive Adjustments */
    @@media (max-width: 992px) {
        .sidebar

    {
        width: 80px;
    }

    .sidebar .nav-label {
        display: none;
    }

    .main-container {
        margin-left: 80px;
    }

    }

    @@media (max-width: 768px) {
        body

    {
        flex-direction: column;
    }

    .sidebar {
        width: 100%;
        height: auto;
        position: relative;
        padding: 15px;
    }

    .sidebar-nav {
        flex-direction: row;
        flex-wrap: wrap;
        justify-content: center;
    }

    .main-container {
        margin-left: 0;
        padding: 20px;
    }

    }
</style>

<!-- Sidebar -->
<div class="sidebar">
    <header class="sidebar-header">
        <div class="header-logo">
            @if (!string.IsNullOrEmpty(profileImagePath))
            {
                <img src="@profileImagePath" alt="Profile" />
            }
            else
            {
                <img src="https://via.placeholder.com/40" alt="Profile" />
            }
        </div>
        <button class="sidebar-toggler">
            <span class="material-symbols-rounded">menu</span>
        </button>
    </header>

    <nav class="sidebar-nav">
        <a href="/User/Dashboard" class="nav-link">
            <span class="material-symbols-rounded">user</span>
            <span class="nav-label">Dashboard</span>
        </a>
        <a href="/Category" class="nav-link">
            <span class="material-symbols-rounded">Category</span>
            <span class="nav-label">Category</span>
        </a>
        <a href="/BlogPost/Create" class="nav-link">
            <span class="material-symbols-rounded">add</span>
            <span class="nav-label">New Post</span>
        </a>
        <a href="/User/Bookmarks" class="nav-link">
            <span class="material-symbols-rounded">bookmark</span>
            <span class="nav-label">Bookmarks</span>
        </a>
        <a href="/User/Settings" class="nav-link">
            <span class="material-symbols-rounded">settings</span>
            <span class="nav-label">Settings</span>
        </a>
        <a href="/Auth/Logout" class="nav-link">
            <span class="material-symbols-rounded">logout</span>
            <span class="nav-label">Logout</span>
        </a>
    </nav>
</div>

<!-- Main Content -->
<div class="main-container">
    <h2 class="mb-4">BlogHub</h2>

    <form method="get" asp-controller="Feed" asp-action="Index" class="d-flex">
        <input type="text" name="search" value="@ViewBag.SearchQuery" class="form-control" placeholder="Search blog titles..." />
        <button type="submit" class="btn btn-primary ms-2">Search</button>
    </form>


    <form method="get" asp-controller="Feed" asp-action="Index">
        <select name="sort" class="form-select" onchange="this.form.submit()">
            <option value="newest" selected="@(ViewBag.SelectedSort == "newest" ? "selected" : null)">Newest</option>
            <option value="likes" selected="@(ViewBag.SelectedSort == "likes" ? "selected" : null)">Most Liked</option>
            <option value="comments" selected="@(ViewBag.SelectedSort == "comments" ? "selected" : null)">Most Commented</option>
        </select>
    </form>


        </div>

    <div class="blog-feed">
        @if (!Model.Any())
        {
            <div class="alert alert-info">
                No blog posts found. Try adjusting your search or create a new post!
            </div>
        }
        else
        {
            @foreach (var post in Model)
            {
                var isLiked = post.Likes?.Any(l => l.UserId == userId) ?? false;
                var isBookmarked = bookmarkedIds.Contains(post.Id);
                var commentCount = post.Comments?.Count ?? 0;
                var viewCount = post.ViewCount;
                var isMatch = !string.IsNullOrEmpty(searchQuery) &&
                post.Title.Contains(searchQuery, StringComparison.OrdinalIgnoreCase);

                <div class="col-12 mb-4">
                    <div class="blog-card @(isMatch ? "border-primary" : "")">
                        <div class="d-flex align-items-start gap-3">
                            @if (!string.IsNullOrEmpty(post.ImagePath))
                            {
                                <img src="@post.ImagePath" alt="Blog image" style="width: 120px; height: 80px; object-fit: cover; border-radius: 8px;">
                            }
                            else
                            {
                                <div style="width: 120px; height: 80px; background-color: #e2e8f0; display: flex; align-items: center; justify-content: center;">
                                    <i class="fas fa-image"></i>
                                </div>
                            }

                            <div>
                                <h4><a href="/BlogPost/Details/@post.Id" class="text-decoration-none">@post.Title</a></h4>
                                <div class="d-flex gap-2 mb-2">
                                    <span class="text-muted small">@post.CreatedAt.ToString("MMM dd, yyyy")</span>
                                    @if (post.IsAdminChoice)
                                    {
                                        <span class="badge bg-warning text-dark">Editor's Choice</span>
                                    }
                                </div>
                                <div class="d-flex gap-2 flex-wrap">
                                    @foreach (var tag in (post.Tags ?? "").Split(','))
                                    {
                                        if (!string.IsNullOrWhiteSpace(tag))
                                        {
                                            <span class="badge bg-light text-dark">@tag.Trim()</span>
                                        }
                                    }
                                </div>
                            </div>
                        </div>

                        <!-- Stats and buttons -->
                        <div class="blog-stats mt-3 pt-3 border-top d-flex gap-3 align-items-center">
                            <form method="post" asp-controller="BlogPost" asp-action="Like" asp-route-id="@post.Id">
                                <button class="like-btn" type="submit">
                                    <i class="fas fa-heart" style="color: @(isLiked ? "#ef4444" : "#cbd5e1")"></i>
                                    <span>@(post.Likes?.Count ?? 0)</span>
                                </button>
                            </form>
                            <form method="post" asp-controller="User" asp-action="ToggleBookmark" asp-route-id="@post.Id">
                                @Html.AntiForgeryToken()
                                <button class="bookmark-btn" type="submit">
                                    <i class="fas fa-bookmark" style="color: @(isBookmarked ? "#f59e0b" : "#cbd5e1")"></i>
                                </button>
                            </form>
                            <div class="stat-item"><i class="fas fa-comment"></i> <span>@commentCount</span></div>
                            <div class="stat-item"><i class="fas fa-eye"></i> <span>@viewCount</span></div>
                        </div>
                    </div>
                </div>
            }
        }
    </div>
</div>

@section Scripts {
    <script>
        document.querySelectorAll('.share-toggle').forEach((btn, index) => {
            btn.addEventListener('click', function () {
                document.querySelectorAll('.share-box').forEach(box => box.style.display = 'none');
                const shareBox = this.nextElementSibling;
                shareBox.style.display = (shareBox.style.display === 'flex') ? 'none' : 'flex';

                const postId = document.querySelectorAll('.blog-card')[index].querySelector('a').href.split('/').pop();
                const postUrl = `${window.location.origin}/BlogPost/Details/${postId}`;

                const links = shareBox.querySelectorAll('.share-link');
                links[0].href = `https://wa.me/?text=${encodeURIComponent(postUrl)}`;
                links[1].href = `https://www.facebook.com/sharer/sharer.php?u=${encodeURIComponent(postUrl)}`;
                links[2].href = `https://t.me/share/url?url=${encodeURIComponent(postUrl)}`;
                links[3].href = `https://twitter.com/intent/tweet?url=${encodeURIComponent(postUrl)}`;
            });
        });

        document.querySelectorAll('.copy-link').forEach((btn, index) => {
            btn.addEventListener('click', function (e) {
                e.preventDefault();
                const postId = document.querySelectorAll('.blog-card')[index].querySelector('a').href.split('/').pop();
                const postUrl = `${window.location.origin}/BlogPost/Details/${postId}`;
                navigator.clipboard.writeText(postUrl).then(() => {
                    const msg = document.getElementById('copyMsg');
                    msg.style.display = 'block';
                    setTimeout(() => msg.style.display = 'none', 2000);
                });
            });
        });

        document.querySelector('.sidebar-toggler').addEventListener('click', function () {
            document.querySelector('.sidebar').classList.toggle('collapsed');
        });

        document.querySelector('input[name="search"]').addEventListener('change', function () {
            this.form.submit();
        });
    </script>
} *@





@* 

@inject blogapp.Data.BlogDBContext db
@model IEnumerable<blogapp.Models.BlogPost>

@{
    int userId = ViewBag.UserId ?? 0;
    var isCreator = db.BlogPosts.Any(p => p.UserId == userId);
    var notifications = db.Notifications
      .Where(n => !n.IsForCreators || isCreator)
      .OrderByDescending(n => n.CreatedAt)
      .Take(5)
      .ToList();
    ViewData["Title"] = "Blog Feed";
    var userName = Context.Session.GetString("UserName");
    var isLoggedIn = !string.IsNullOrEmpty(userName);
    var bookmarkedIds = ViewBag.BookmarkedIds as List<int> ?? new List<int>();
    var selectedSort = ViewBag.SelectedSort as string ?? "";
    var searchQuery = ViewBag.SearchQuery as string ?? "";
    var profileImagePath = Context.Session.GetString("ProfileImagePath") ?? "";
    var hasProfileImage = !string.IsNullOrEmpty(profileImagePath);
}

<!-- Fonts & Icons -->
<link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;500;600;700&display=swap" rel="stylesheet">
<link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css" rel="stylesheet">
<link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Material+Symbols+Rounded:opsz,wght,FILL,GRAD@24,400,0,0">

<style>
    * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
        font-family: "Poppins", sans-serif;
    }

    body {
        min-height: 100vh;
        background: linear-gradient(#F1FAFF, #CBE4FF);
        display: flex;
    }

    /* Sidebar Styles */
    .sidebar {
        width: 270px;
        background: #151A2D;
        height: 100vh;
        position: fixed;
        left: 0;
        top: 0;
        overflow-y: auto;
        padding: 20px;
        box-shadow: 2px 0 10px rgba(0,0,0,0.1);
        z-index: 100;
    }

    .sidebar-header {
        display: flex;
        align-items: center;
        justify-content: space-between;
        padding-bottom: 20px;
        border-bottom: 1px solid rgba(255,255,255,0.1);
        margin-bottom: 20px;
    }

        .sidebar-header img {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            object-fit: cover;
        }

    .bookmark-toast {
        position: fixed;
        bottom: 30px;
        right: 30px;
        background-color: #111827;
        color: #facc15;
        padding: 12px 20px;
        border-radius: 8px;
        font-size: 14px;
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.2);
        z-index: 9999;
        animation: fade-in 0.3s ease;
    }

    @@keyframes fade-in {
        from

    {
        opacity: 0;
        transform: translateY(20px);
    }

    to {
        opacity: 1;
        transform: translateY(0);
    }

    }

    .sidebar-toggler {
        background: transparent;
        border: none;
        color: white;
        cursor: pointer;
        font-size: 1.5rem;
    }

    .sidebar-nav {
        display: flex;
        flex-direction: column;
        gap: 10px;
    }

    .nav-link {
        color: white;
        text-decoration: none;
        display: flex;
        align-items: center;
        gap: 12px;
        padding: 12px 15px;
        border-radius: 8px;
        transition: all 0.3s ease;
    }

        .nav-link:hover {
            background: rgba(255,255,255,0.1);
        }

        .nav-link span.material-symbols-rounded {
            font-size: 1.5rem;
        }

    /* Main Content Styles */
    .main-container {
        flex: 1;
        margin-left: 270px; /* Same as sidebar width */
        padding: 30px;
        max-width: calc(100% - 270px);
    }

    /* Blog Card Styles */
    .blog-card {
        background: white;
        border-radius: 12px;
        padding: 20px;
        margin-bottom: 20px;
        box-shadow: 0 4px 15px rgba(0,0,0,0.05);
    }

    /* Responsive Adjustments */
    @@media (max-width: 992px) {
        .sidebar {
            width: 80px;
        }

            .sidebar .nav-label {
                display: none;
            }

        .main-container {
            margin-left: 80px;
            max-width: calc(100% - 80px);
        }
    }

    @@media (max-width: 768px) {
        body {
            flex-direction: column;
        }

        .sidebar {
            width: 100%;
            height: auto;
            position: relative;
            padding: 15px;
        }

        .sidebar-nav {
            flex-direction: row;
            flex-wrap: wrap;
            justify-content: center;
        }

        .main-container {
            margin-left: 0;
            max-width: 100%;
            padding: 20px;
        }
    }
</style>
<!-- Sidebar -->
<div class="sidebar">
    <header class="sidebar-header">
        <div class="header-logo">
            @if (!string.IsNullOrEmpty(profileImagePath))
            {
                <img src="@profileImagePath" alt="Profile" />
            }
            else
            {
                <img src="https://via.placeholder.com/40" alt="Profile" />
            }
        </div>
        <button class="sidebar-toggler">
            <span class="material-symbols-rounded">menu</span>
        </button>
    </header>

    <nav class="sidebar-nav">
        <a href="/User/Dashboard" class="nav-link">
            <span class="material-symbols-rounded">user</span>
            <span class="nav-label">Dashboard</span>
        </a>
        <a href="/Category" class="nav-link">
            <span class="material-symbols-rounded">Category</span>
            <span class="nav-label">Category</span>
        </a>
        <a href="/BlogPost/Create" class="nav-link">
            <span class="material-symbols-rounded">add</span>
            <span class="nav-label">New Post</span>
        </a>
        <a href="/User/Bookmarks" class="nav-link">
            <span class="material-symbols-rounded">bookmark</span>
            <span class="nav-label">Bookmarks</span>
        </a>
        <a href="/User/Settings" class="nav-link">
            <span class="material-symbols-rounded">settings</span>
            <span class="nav-label">Settings</span>
        </a>
        <a href="/Auth/Logout" class="nav-link">
            <span class="material-symbols-rounded">logout</span>
            <span class="nav-label">Logout</span>
        </a>
    </nav>
</div>


<!-- Main Content -->
<div class="main-container">
    <h2 class="mb-4">BlogHub</h2>

    <form method="get" asp-controller="Feed" asp-action="Index" class="d-flex">
        <input type="text" name="search" value="@ViewBag.SearchQuery" class="form-control" placeholder="Search blog titles..." />
        <button type="submit" class="btn btn-primary ms-2">Search</button>
    </form>


    <form method="get" asp-controller="Feed" asp-action="Index">
        <select name="sort" class="form-select" onchange="this.form.submit()">
            <option value="newest" selected="@(ViewBag.SelectedSort == "newest" ? "selected" : null)">Newest</option>
            <option value="likes" selected="@(ViewBag.SelectedSort == "likes" ? "selected" : null)">Most Liked</option>
            <option value="comments" selected="@(ViewBag.SelectedSort == "comments" ? "selected" : null)">Most Commented</option>
        </select>
    </form>

    <div class="blog-feed">
        @if (!Model.Any())
        {
            <div class="alert alert-info">
                No blog posts found. Try adjusting your search or create a new post!
            </div>
        }
        else
        {
            @foreach (var post in Model)
            {

                var isLiked = post.Likes?.Any(l => l.UserId == userId) ?? false;
                var isBookmarked = bookmarkedIds.Contains(post.Id);
                var commentCount = post.Comments?.Count ?? 0;
                var viewCount = post.ViewCount;
                var isMatch = !string.IsNullOrEmpty(searchQuery) &&
                post.Title.Contains(searchQuery, StringComparison.OrdinalIgnoreCase);
                @if (TempData["BookmarkMessage"] != null)
                {
                    <div id="bookmark-toast" class="bookmark-toast">
                        @TempData["BookmarkMessage"]
                    </div>

                    <script>
                        setTimeout(() => {
                            const toast = document.getElementById("bookmark-toast");
                            if (toast) toast.style.display = "none";
                        }, 2500);
                    </script>
                }
                <div class="col-12 mb-4">
                    <div class="blog-card @(isMatch ? "border-primary" : "")">
                        <div class="d-flex align-items-start gap-3">
                            @if (!string.IsNullOrEmpty(post.ImagePath))
                            {
                                <img src="@post.ImagePath" alt="Blog image" style="width: 120px; height: 80px; object-fit: cover; border-radius: 8px;">
                            }
                            else
                            {
                                <div style="width: 120px; height: 80px; background-color: #e2e8f0; display: flex; align-items: center; justify-content: center;">
                                    <i class="fas fa-image"></i>
                                </div>
                            }

                            <div>
                                <h4><a href="/BlogPost/Details/@post.Id" class="text-decoration-none">@post.Title</a></h4>
                                <div class="d-flex gap-2 mb-2">
                                    <span class="text-muted small">@post.CreatedAt.ToString("MMM dd, yyyy")</span>
                                    @if (post.IsAdminChoice)
                                    {
                                        <span class="badge bg-warning text-dark">Editor's Choice</span>
                                    }
                                </div>
                                <div class="d-flex gap-2 flex-wrap">
                                    @foreach (var tag in (post.Tags ?? "").Split(','))
                                    {
                                        if (!string.IsNullOrWhiteSpace(tag))
                                        {
                                            <span class="badge bg-light text-dark">@tag.Trim()</span>
                                        }
                                    }
                                </div>
                            </div>
                            
                            }
                        </div>

                        <!-- Stats and buttons -->
                        <div class="blog-stats mt-3 pt-3 border-top d-flex gap-3 align-items-center">
                            <form method="post" asp-controller="BlogPost" asp-action="Like" asp-route-id="@post.Id">
                                <button class="like-btn" type="submit">
                                    <i class="fas fa-heart" style="color: @(isLiked ? "#ef4444" : "#cbd5e1")"></i>
                                    <span>@(post.Likes?.Count ?? 0)</span>
                                </button>
                            </form>
                                              <form method="post" asp-controller="User" asp-action="ToggleBookmark" asp-route-id="@post.Id">
                                @Html.AntiForgeryToken()
                                <button class="bookmark-btn" type="submit" style="background: none; border: none;">
                                    <i class="fas fa-bookmark"
                                       style="font-size: 20px; color: @(isBookmarked ? "#f59e0b" : "#cbd5e1")"></i>
                                </button>
                            </form>
                            <div class="stat-item"><i class="fas fa-comment"></i> <span>@commentCount</span></div>
                            <div class="stat-item"><i class="fas fa-eye"></i> <span>@viewCount</span></div>
                        </div>
                    </div>
                </div>
            }
        }
    </div>
</div>

@section Scripts {
    <script>
        document.querySelectorAll('.share-toggle').forEach((btn, index) => {
            btn.addEventListener('click', function () {
                document.querySelectorAll('.share-box').forEach(box => box.style.display = 'none');
                const shareBox = this.nextElementSibling;
                shareBox.style.display = (shareBox.style.display === 'flex') ? 'none' : 'flex';

                const postId = document.querySelectorAll('.blog-card')[index].querySelector('a').href.split('/').pop();
                const postUrl = `${window.location.origin}/BlogPost/Details/${postId}`;

                const links = shareBox.querySelectorAll('.share-link');
                links[0].href = `https://wa.me/?text=${encodeURIComponent(postUrl)}`;
                links[1].href = `https://www.facebook.com/sharer/sharer.php?u=${encodeURIComponent(postUrl)}`;
                links[2].href = `https://t.me/share/url?url=${encodeURIComponent(postUrl)}`;
                links[3].href = `https://twitter.com/intent/tweet?url=${encodeURIComponent(postUrl)}`;
            });
        });

        document.querySelectorAll('.copy-link').forEach((btn, index) => {
            btn.addEventListener('click', function (e) {
                e.preventDefault();
                const postId = document.querySelectorAll('.blog-card')[index].querySelector('a').href.split('/').pop();
                const postUrl = `${window.location.origin}/BlogPost/Details/${postId}`;
                navigator.clipboard.writeText(postUrl).then(() => {
                    const msg = document.getElementById('copyMsg');
                    msg.style.display = 'block';
                    setTimeout(() => msg.style.display = 'none', 2000);
                });
            });
        });

        document.querySelector('.sidebar-toggler').addEventListener('click', function () {
            document.querySelector('.sidebar').classList.toggle('collapsed');
        });

        document.querySelector('input[name="search"]').addEventListener('change', function () {
            this.form.submit();
        });
    </script>
} *@



@inject blogapp.Data.BlogDBContext db
@model IEnumerable<blogapp.Models.BlogPost>

@{
    int userId = ViewBag.UserId ?? 0;
    var isCreator = db.BlogPosts.Any(p => p.UserId == userId);
    ViewData["Title"] = "Blog Feed";
    var userName = Context.Session.GetString("UserName");
    var isLoggedIn = !string.IsNullOrEmpty(userName);
    var bookmarkedIds = ViewBag.BookmarkedIds as List<int> ?? new List<int>();
    var selectedSort = ViewBag.SelectedSort as string ?? "";
    var searchQuery = ViewBag.SearchQuery as string ?? "";
}

<!-- Main Content -->
<div class="container-fluid">
    <div class="row">
        <!-- Sidebar -->
        <div class="col-md-3 col-lg-2 sidebar p-0">
            <div class="d-flex flex-column h-100">
                <div class="sidebar-header p-3 text-center">
                    <h4 class="text-white mb-0">BlogHub</h4>
                </div>
                <nav class="flex-grow-1 p-3">
                    <a href="/User/Dashboard" class="nav-link">
                        <i class="fas fa-tachometer-alt me-2"></i>Dashboard
                    </a>
                    <a href="/Category" class="nav-link">
                        <i class="fas fa-tags me-2"></i>Categories
                    </a>
                    <a href="/BlogPost/Create" class="nav-link">
                        <i class="fas fa-plus-circle me-2"></i>New Post
                    </a>
                    <a href="/User/Bookmarks" class="nav-link">
                        <i class="fas fa-bookmark me-2"></i>Bookmarks
                    </a>
                    <a href="/User/Settings" class="nav-link">
                        <i class="fas fa-cog me-2"></i>Settings
                    </a>
                </nav>
                <div class="p-3">
                    <a href="/Auth/Logout" class="nav-link">
                        <i class="fas fa-sign-out-alt me-2"></i>Logout
                    </a>
                </div>
            </div>
        </div>

        <!-- Main Content -->
        <div class="col-md-9 col-lg-10 ms-sm-auto px-4 py-3">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h2>Blog Feed</h2>
                <div class="d-flex">
                    <form method="get" asp-controller="Feed" asp-action="Index" class="me-2">
                        <div class="input-group">
                            <input type="text" name="search" value="@searchQuery" class="form-control"
                                   placeholder="Search..." aria-label="Search">
                            <button class="btn btn-primary" type="submit">
                                <i class="fas fa-search"></i>
                            </button>
                        </div>
                    </form>
                    <form method="get" asp-controller="Feed" asp-action="Index">
                        <select name="sort" class="form-select" onchange="this.form.submit()">
                            <option value="newest" selected="@(selectedSort == "newest")">Newest</option>
                            <option value="likes" selected="@(selectedSort == "likes")">Most Liked</option>
                            <option value="comments" selected="@(selectedSort == "comments")">Most Commented</option>
                        </select>
                    </form>
                </div>
            </div>

            @if (!Model.Any())
            {
                <div class="alert alert-info">
                    No blog posts found. Try adjusting your search or create a new post!
                </div>
            }
            else
            {
                <div class="row">
                    @foreach (var post in Model)
                    {
                        var isLiked = post.Likes?.Any(l => l.UserId == userId) ?? false;
                        var isBookmarked = bookmarkedIds.Contains(post.Id);
                        var commentCount = post.Comments?.Count ?? 0;
                        var viewCount = post.ViewCount;

                        <div class="col-md-6 col-lg-4 mb-4">
                            <div class="card h-100 shadow-sm">
                                @if (!string.IsNullOrEmpty(post.ImagePath))
                                {
                                    <img src="@post.ImagePath" class="card-img-top" alt="@post.Title" style="height: 180px; object-fit: cover;">
                                }
                                else
                                {
                                    <div class="card-img-top bg-light d-flex align-items-center justify-content-center" style="height: 180px;">
                                        <i class="fas fa-image fa-3x text-muted"></i>
                                    </div>
                                }

                                <div class="card-body">
                                    <h5 class="card-title">
                                        <a href="/BlogPost/Details/@post.Id" class="text-decoration-none">@post.Title</a>
                                    </h5>
                                    <div class="d-flex gap-2 mb-2">
                                        <small class="text-muted">@post.CreatedAt.ToString("MMM dd, yyyy")</small>
                                        @if (post.IsAdminChoice)
                                        {
                                            <span class="badge bg-warning text-dark">Editor's Choice</span>
                                        }
                                    </div>
                                    <div class="mb-3">
                                        @foreach (var tag in (post.Tags ?? "").Split(','))
                                        {
                                            if (!string.IsNullOrWhiteSpace(tag))
                                            {
                                                <span class="badge bg-light text-dark me-1">@tag.Trim()</span>
                                            }
                                        }
                                    </div>
                                </div>

                                <div class="card-footer bg-white border-top-0">
                                    <div class="d-flex justify-content-between align-items-center">
                                        <div class="d-flex gap-2">
                                            <form method="post" asp-controller="BlogPost" asp-action="Like" asp-route-id="@post.Id" class="mb-0">
                                                <button type="submit" class="btn btn-sm btn-outline-danger">
                                                    <i class="fas fa-heart @(isLiked ? "text-danger" : "")"></i>
                                                    <span>@(post.Likes?.Count ?? 0)</span>
                                                </button>
                                            </form>
                                            <a href="/BlogPost/Details/@post.Id#comments" class="btn btn-sm btn-outline-secondary">
                                                <i class="fas fa-comment"></i> @commentCount
                                            </a>
                                            <span class="btn btn-sm btn-outline-secondary">
                                                <i class="fas fa-eye"></i> @viewCount
                                            </span>
                                            <form method="post" asp-controller="User" asp-action="ToggleBookmark" asp-route-id="@post.Id">
                                                @Html.AntiForgeryToken()
                                                <button class="bookmark-btn" type="submit" style="background: none; border: none;">
                                                    <i class="fas fa-bookmark"
                                                       style="font-size: 20px; color: @(isBookmarked ? "#f59e0b" : "#cbd5e1")"></i>
                                                </button>
                                            </form>
                                        </div>

                                        

<!-- Share Icon Button -->
                                        @{
                                            var shareUrl = Url.Action("Details", "BlogPost", new { id = post.Id }, Context.Request.Scheme);
                                        }

                                        <!-- Share Button -->
                                        <div class="blog-post position-relative">
                                            <h3>@post.Title</h3>
                                            <p>@post.Content</p>

                                            <!-- Share button -->
                                            <button class="btn btn-sm btn-outline-primary toggle-share" data-post-id="@post.Id">
                                                <i class="fas fa-share-alt"></i>
                                            </button>

                                            <!-- Inject share box -->
                                            @await Html.PartialAsync("_ShareBox", post.Id)
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            }
        </div>
    </div>
</div>
<div id="post-container">
    @Html.Partial("_BlogPostPartial", Model)
</div>
<button id="load-more-btn" class="btn btn-primary mt-3">Load More</button>

<!-- Toast Notification -->
@if (TempData["BookmarkMessage"] != null)
{
    <div class="position-fixed bottom-0 end-0 p-3" style="z-index: 11">
        <div class="toast show" role="alert" aria-live="assertive" aria-atomic="true">
            <div class="toast-header bg-warning">
                <strong class="me-auto">Notification</strong>
                <button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>
            </div>
            <div class="toast-body">
                @TempData["BookmarkMessage"]
            </div>
        </div>
    </div>
}

@section Styles {
    <style>
        body {
            background: linear-gradient(#F1FAFF, #CBE4FF);
            min-height: 100vh;
        }

        .sidebar {
            background: #1a2035;
            color: white;
            min-height: 100vh;
            position: sticky;
            top: 0;
        }

        .sidebar-header {
            background: rgba(0, 0, 0, 0.2);
            border-bottom: 1px solid rgba(255, 255, 255, 0.1);
        }

        .nav-link {
            color: rgba(255, 255, 255, 0.8);
            padding: 0.5rem 1rem;
            border-radius: 0.25rem;
            margin-bottom: 0.25rem;
            transition: all 0.2s;
        }

            .nav-link:hover, .nav-link.active {
                color: white;
                background: rgba(255, 255, 255, 0.1);
                text-decoration: none;
            }

        .card {
            transition: transform 0.2s;
            border: none;
            border-radius: 0.5rem;
        }

            .card:hover {
                transform: translateY(-5px);
                box-shadow: 0 10px 20px rgba(0, 0, 0, 0.1);
            }

        .card-img-top {
            border-top-left-radius: 0.5rem;
            border-top-right-radius: 0.5rem;
        }

        @@media (max-width: 768px) {
            .sidebar {
                min-height: auto;
                position: relative;
            }

            .col-md-9 {
                padding-left: 15px;
                padding-right: 15px;
            }
        }
        /* Share box styling */
        .share-box i {
            font-size: 18px;
            margin: 5px;
            color: #333;
            transition: transform 0.2s, color 0.2s;
        }

            .share-box i:hover {
                transform: scale(1.2);
                color: #007bff;
            }

        /* Slide in animation */
        @@keyframes slideIn {
            from

        {
            opacity: 0;
            transform: translateY(-10px);
        }

        to {
            opacity: 1;
            transform: translateY(0);
        }

        }
    </style>
}

@section Scripts {
    <script>
        let skip = 5;

        function attachShareAndCopyEvents() {
            // Toggle share box
            document.querySelectorAll(".toggle-share").forEach(button => {
                button.onclick = function () {
                    const postId = this.getAttribute("data-post-id");
                    const shareBox = document.getElementById("share-box-" + postId);

                    // Hide all other share boxes
                    document.querySelectorAll(".share-box").forEach(box => {
                        if (box !== shareBox) box.style.display = "none";
                    });

                    // Toggle current share box
                    if (shareBox.style.display === "block") {
                        shareBox.style.display = "none";
                    } else {
                        // Position near button (fixed for scrolling)
                        const rect = this.getBoundingClientRect();
                        shareBox.style.position = "absolute";
                        shareBox.style.top = `${window.scrollY + rect.bottom + 5}px`;
                        shareBox.style.left = `${rect.left}px`;
                        shareBox.style.display = "block";
                    }
                };
            });

            // Close share box
            document.querySelectorAll(".close-share").forEach(btn => {
                btn.onclick = function () {
                    this.closest(".share-box").style.display = "none";
                };
            });

            // Share to platform
            document.querySelectorAll(".share-link").forEach(link => {
                link.onclick = function (e) {
                    e.preventDefault();
                    const url = window.location.origin + this.getAttribute("data-url");
                    const platform = this.getAttribute("data-platform");
                    let shareUrl = "";

                    switch (platform) {
                        case "facebook":
                            shareUrl = `https://www.facebook.com/sharer/sharer.php?u=${encodeURIComponent(url)}`;
                            break;
                        case "twitter":
                            shareUrl = `https://twitter.com/intent/tweet?url=${encodeURIComponent(url)}`;
                            break;
                        case "linkedin":
                            shareUrl = `https://www.linkedin.com/shareArticle?mini=true&url=${encodeURIComponent(url)}`;
                            break;
                    }

                    if (shareUrl) {
                        window.open(shareUrl, "_blank", "width=600,height=400");
                    }
                };
            });

            // Copy link handler
            document.querySelectorAll(".copy-link").forEach(link => {
                link.onclick = function (e) {
                    e.preventDefault();
                    const url = window.location.origin + this.getAttribute("data-url");
                    navigator.clipboard.writeText(url).then(() => {
                        const toastEl = document.querySelector(".toast");
                        if (toastEl) {
                            const toast = new bootstrap.Toast(toastEl);
                            toast.show();
                            setTimeout(() => toast.hide(), 3000);
                        } else {
                            alert("Link copied to clipboard!");
                        }
                    }).catch(() => {
                        alert("Failed to copy link.");
                    });
                };
            });
        }

        // Attach once on page load
        attachShareAndCopyEvents();

        // Load more blogs
        document.getElementById("load-more-btn").addEventListener("click", function () {
            fetch(`/Feed/LoadMore?skip=${skip}`)
                .then(res => res.text())
                .then(html => {
                    const container = document.getElementById("post-container");
                    container.insertAdjacentHTML("beforeend", html);
                    skip += 5;

                    // Re-attach handlers for new elements
                    attachShareAndCopyEvents();

                    // Hide Load More if no more content
                    if (!html.trim()) {
                        this.style.display = "none";
                    }
                });
        });

        // Bookmark toggle logic
        $(document).on("click", ".bookmark-icon", function () {
            const icon = $(this);
            const postId = icon.data("post-id");

            $.post("/Bookmark/Toggle", { postId: postId }, function (isBookmarked) {
                icon.removeClass("text-warning text-secondary");
                icon.addClass(isBookmarked ? "text-warning" : "text-secondary");
            });
        });
    </script>

}